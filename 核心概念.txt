本质上，webback是一个现代JavaScript应用程序的静态模块打包器。当webback处理应用程序时，它会递归的构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将所有的这些模块打包成一个或多个bundle

入口：入口起点指示webpack应该使用哪个模块，来作为构建其内部依赖图的开始，进入入口起点后，webpack会找出有哪些模块和库时入口起点依赖的
每个依赖项随即被处理，最后输出到称之为bundles的文件中
可以通过在webpack配置中，配置entry属性，来指定一个入口起点（或多个入口起点）。默认值为./src

module.exports = {
    entry: './path/to/my/entry/file.js'
}

出口：output属性告诉webpack在哪里输出它所创建的bundles，以及如何命名这些文件，默认值为./dist。基本上，整个应用程序结构，都会被编译到你指定的输出路径的文件夹，你可以通过在配置中指定一个output字段，来配置这些处理过程：
 output:{
	path: path.resolve(__dirname,'dist'),
	filename: 'my-first-webpack.bundle.js' 
} 

loader：
loader让webpack能够去处理那些非JavaScript文件（webpack自身只理解JavaScript）。loader可以将所有类型的文件转换为webpack能够处理的有效模块，然后你就可以利用webpack的打包能力，对他们进行处理

注意：loader能够让import导入任何类型的模块。这是webpack特有的功能，其他打包程序或任务执行器可能并不支持，我们人为这种语言扩展是很有必要的，因为这可以使开发人员创建出更准确的依赖关系图

在webpack中loader有两个目标:
	• test属性，用于标识出应该被对应的loader进行转换的某个或某些文件
	• use属性，表示进行转换时，应该使用哪个loader

const path = require('path'); 
const config = {
	output: {
	    filename: 'my-first-webpack.bundle.js'
	},
	module: {
	    rules: [
		{ test : /\.txt/, use: 'raw-loader'}
	   ]
	}
};
module.exports = config;

对一个单独的module对象定义了rules属性，里面包含两个必须属性：test和use,这告诉webpack编译如下信息：
嘿，webpack编译器，当你碰到在require() / import 语句中被解析为 '.txt'的路径时，在你对它进行打包之前，先使用raw-loader转换一下

重要的是，在webpack配置中定义loader时，要定义在module.rules中，而不是rules，然而，在定义错误时webpack会给出严重的警告，为了是你受益于此，如果没有按照正确的方式去做，webpack会给出严重的警告

插件：
loader被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义的环境中的变量。插件接口的功能及其强大，可以用来处理各种各样的任务
想要用一个插件，你只需要 require() 它，然后把它添加到plugins数据中，多数插件可以通过选项自定义。你也可以在一个配置中因为不同目的而多次使用同一个插件，这是需要通过使用new 操作符来创建它的一个实例

const HtmlWebpackPlugin = require('heml-ewbpack-plugin') ; // 通过npm 安装
const webpack = require('webpack');   // 用于访问内置插件

const config  = {
	module: {
		rules: [
			{ test : /\.txt$/.use : 'raw-loader' }
		]
	},
	plugins: [
		new HtmlWebpackPlugin( { template: './src/index.html '})
	]
};
module.exports = config;

模式：
通过选择 development 或 production 之中的一个，来设置mode参数，你可以启用相应模式下的webpack内置的优化

入口写法:
	• 单个入口写法
	简写 ：const config = {
			entry: './path/to/my/entry/file.js'
		   };
	module.exports = config;
	正常写： const config = {
				entry: {
					main: './path/to/my/entry/file.js'
				}
	               };
	当你向entry传入一个数组时，将创建多个主入口，在你想要多个依赖文件一起注入时，并且将他们的依赖导向一个chunk时，导入数组的方式就很有用。使用这种语法在扩展配置时有失灵活性
	• 对象语法: 用法  entry :{[ entryChunkName: string]: string| Array<string>}
	const config = {
		entry: {
			app : './src/app.js',
			vendors: './src/vendors.js'
		}
	};
	      对象语法会比较繁琐。然而，这是应用程序中定义入口的最可能的方式。可扩展的webpack配置是指，可重用并且可以与其他配置组合使用，这是一种流行的技术，用于将关注点从环境，构建目标，运行时中分离。然后使用专门的工具将它们合并
	       从表面上看，这告诉我们webpack从app.js和vendors.js开始创建依赖图。这些依赖图是彼此完全分离，互相独立的。这种方式比较常见于，只有一个入口起点的单页应用程序
	       此设置允许你使用CommonsChunkPlugin从应用程序中提取vendor引用到vendor bundle，并把vendor的部分替换为webpack_require调用。如果应用程序bundle中没有vendor代码，那么你可以在webpack中实现被称为长效缓存的通用模式
	多页面应用程序：
	const config = {
		entry: {
			pageOne: './src/pageOne/index.js', 
			pageTwo: './src/pageTwo/index.js',
			pageThree: './src/pageThree/index.js'
		}
	}
	在多页面中，每当页面跳转时，服务器将为你获取一个新的HTML文档。页面重新加载新文档，并且资源被重新下载。然而，这给了我们特殊的机会去做很多事
	
输出output
配置output选项可以控制webpack如何向硬盘写入编译文件。注意，即使存在多个入口，但只能指定一个输出配置
在webpack中配置output属性的最低要求是，将它的值设置为一个对象。包括以下两点：
	• filename 用于输出文件的文件名
	• 目标输出目录 path 的绝对路径
	
    const config = {
	output: {
		filename: 'bundle.js',
		path: '/home/proj/public/assets'
	}
};
module.exports = config; 
此配置将一个单独的bundle.js文件输出到/home/proj/public/assets目录中。
多个入口起点
如果配置创建了多个单独的chunk，则应该使用展位符来确保每个文件具有唯一名称
{
	entry: {
		app: './src/app.js',
		search: './src/search.js'
	},
	output: {
		filename: '[name].js', 
		path: __dirname + '/dist' 
	}
}
写入到硬盘： ./dist/app.js   , ./dist/search.js

模式
提供mode配置选项，告知webpack使用相应的模式的内置优化
module.exports = { 
	mode: 'production'
}
或者从cli参数中传递： webpack --mode=production
	• development   : 会将process.env.NODE_ENV 的值设为 development。启用NamedChunkPlugin 和NamedModulesPlugin
	• production      : 会将process.env.NODE_ENV的值设为production。启用FlagDependencyUsagePlugin,FlagIncludedChunkPlugin,ModeleConcatenationPlugin,NoEmitOneErrorsPlugin ,
只设置NOOE_ENV,则不会自动设置mode
	module.exports = {
		mode: 'development'
	}

loader:
       loader用于对模块的源代码进行转换。loader可以使你在import或加载模块时预处理文件，因此loader类似于构建工具中“任务（task）”,并提供了处理前端构建步骤的强大方法。loader可以将文件从不同的语言转换为JavaScript，或将内联图像转换为data URL。loader甚至允许你直接在JavaScript中import CSS文件
       首先安装相对应的依赖：
	npm install  --save-dev css-loader
	npm install  --save-dev ts-loader
	然后webpack对每个.css是用css-loader,以及对所有.ts文件是用ts-loader:
	module.exports = {
		module:{
			rules: [ 
				{ test: /\.css$/, use: 'css-loader'},
				{ test: /\.ts$/, use: 'ts-loader'}
			] 
		}
	} 
	
	module.rules 允许你在webpack配置中指定多个loader，这是展示loader的一种简明方式，并且有助于代码变得简洁。同时让你对各个loader有个全局概览
	
	module: {
		rules: [
			{
				test：/\.css/,
				use: [
					{loader: 'style-loader'},
					{
					 loader: 'css-loader',
					 options: {
						modules: true
						}
					}
				] 
			}
		]
	} 
	
	loader特性
	• loader支持链式传递。能够对资源使用流水线。一组链式的loader将按照相反的顺序执行。loader链中的第一个loader返回值给下一个loader，在最后一个loader，返回webpack所预期的JavaScript
	• loader可以是异步，也可以是同步的
	• loader运行在node.js中，用于对loader传递配置
	• loader也能使用options对象进行配置
	• 除了使用package.json常见的main属性，还可以将普通的npm模块导出为laoder做法是在package.json里定义一个loader字段
	• 插件可以为loader带来更多特性
	• loader能够产生额外的任意文件

插件：目的在于解决loader无法解决的其他事
webpack插件是一个具有apply属性的JavaScript对象，apply属性会被webpack compiler调用，并且compiler对象可在整个编译生命周期访问
const pluginName = 'ConsoleLogOnBuildWebpackPlugin';

class ConsoleLogOnBuildWebpackPlugin {
	apply(compiler){
		compiler.hooks.run.tap(pluginName, compilation =>{
			console.log("webpack 构建过程开始！")
		})
	}
}
compiler hook的tap方法的第一个参数，应该是驼峰式命名的插件名称。建议为此使用一个常量，以便可以在所有hook中复用

用法：由于插件可以携带参数/选项，你必须在webpack配置中，向plugins属性传入new实例

const HtmlWebpackPlugin = reuire('html-webpack-plugin');
const webpack = require('webpack');

const config = {
	plugin: [
		new webpack.optimize.UglifyJsPlugin(),
		new HtmlWebpackPlugin({template: './src/index.html'})
	]
};
node api:
some-node-script.js
const webpack = require('webpack');           // 访问webpack运行（runtime）
const configuration = require('./webpack.config.js');

let compiler = webpack(configuration);
compiler.apply(new webpack.ProgressPlugin());
compiler.run(function(err,stats) {
          // ….
})

webpack配置：
   你可以做到以下事情：
	• 通过require（）导入其他文件
	• 通过require（）使用npm的工具函数
	• 使用JavaScript控制流表达式，例如？：操作符
	• 对常用值使用常量或变量
	• 编写并执行函数来生成部分配置
避免以下做法：
	• 在使用webpack命名行接口（CLI）（应该编写自己的命令行接口）时，访问命令行接口参数
	• 导出不确定的值（调用webpack两次应该产生同样的输出文件）
	• 编写很长的配置（应该将配置拆分为多个文件）
	
基本配置：
var path = require('path');
module.exports = {
	mode: 'development',
	entry: './foo.js',
	output: {
		path: path.resolve(__dirname,'dist'),
		filename: 'foo.bundle.js'
	}
}

模块解析：
resolve是一个库，用于帮助找到模块的绝对路径。一个模块可以作为另一个模块的依赖模块
import foo from 'path/to/module'
// 或者
require('path/to/module')

任何时候。一个文件依赖于另一个文件，webpack就把此视为文件之间有依赖关系，这使得webpack可以接受非代码资源，并且可以把它们作为依赖提供给你的应用程序
webpack从命名行或配置文件中定义的一个模块列表开始，处理你的应用程序

manifest：
在使用webpack构建的典型应用程序或站点中，有三种主要的代码类型：
1 . 你或你的团队编写的源码。
2 . 你的源码会依赖的任何第三方的library或'vendor'代码
3 . webpack的runtime和manifest，管理所有模块的交互

runtime: 
主要是指在浏览器运行时，webpack用来连接模块化的应用程序的所有代码。runtime包含；在模块交互时，连接模块所需的加载和解析逻辑。包括浏览器中的已加载模块的连接，以及懒加载模块的执行逻辑

Manifest：
当编译器开始执行，解析和映射应用程序时，它会保留所有模块的详细要点。这个数据集合成为"Manifest",当完成打包并发送到浏览器时，会在运行时通过Manifest来解析和加载模块。import 或require语句现在都已经转换为__webpack_require__方法，此方法指向模块标识符，通过使用manifest中的数据，runtime将能够查询模块标识符 ，检索出背后对应的模块

通过使用浏览器缓存来改善项目的性能：
通过使用bundle计算出内容散列作为文件名称，这样在内容或文件修改时，浏览器中将通过新的内容散列指向新的文件，从而使缓存无效，一旦你开始这样做，你会立即注意到一些有趣的行为，及时表面上某些内容没有修改，计算出的哈希还是会改变，这是因为。runtime和manifes的注入在每次构建都会发生变化

构建目标：
要设置target属性，只需要在你的webpack配置中设置target的值
webpack.config.js
module.exports = {
	target: 'node'
}
在上面例子中，使用node webpack会编译为用于，类node.js环境（使用node.js的require。而不是使用任意内置模块来加载chunk）
每个target都有各种部署特定的附加项，以支持满足其需求

尽管webpack不支持向target传入多个字符串，你可以通过打包两份分离的配置来创建同构的库：
webpack.config.js
var path = require ('path');
var serverConfig = {
	target: 'node',
	output:{
		path: path.resolve(__dirname,'dist'),
		filename: 'lib.node.js'
	}
}

var clientConfig = {
	target: 'web', // <====默认是"web"，可省略
	output : {
		path： path.resolve(__dirname,'dist'),
		filename: 'lib.js'
	}
}
module.exports = [ serverConfig, clientConfig ];

模块热替换：
模块人替换功能会在应用程序运行过程中替换，添加或删除模块，而无需重新加载整个页面，主要通过以下几种方式，来显著加快开发速度
	• 保留在完全重新加载页面时丢失的应用程序状态
	• 只更新变更内容，以节省宝贵的开发事件
	• 调整样式更加快速，几乎相当在浏览器调试器中更改样式
	
HMR的工作原理
	• 应用程序中:   1.应用程序代码要求HMR runtime检查更新    2. HMR runtime（异步）下载更新，然后通知应用程序代码    3. 应用程序代码要求HMR  runtime应用更新  4. HMR runtime（同步）应用更新     你可以设置HMR,以使进程自动触发更新。或者你可以选择在用户交互时进行更新
	• 在编译器中： 除了普通资源，编译器需要发出"update"，以允许更新之前的版本到新的版本。update由两部分组成：1.更新后的manifest    2.一个或多个更新后的chunk        manifest包括新的编译hash和所有的待更新chunk目录。每个更新chunk的全部更新模块的代码    编译器确保模块ID和chunk ID 在这些构建直接保持一致，通常将这些ID存储在内存中，但是也可能将他们存储在一个json文件中
	• 在模块中：HMR是可选功能，只会影响HMR代码的模块。举个例子，通过style-loader为style样式追加补丁。为了运行追加补丁，style-loader实现了HMR接口；当它通过HMR接受到更新，它会使用新的样式替换旧的样式。
